apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: ethio-dev-worker
  title: Serverless Function
  description: Create a route and attach a function on that route under a specified api gateway. This potentially generates a repo with serverless code
  tags:
    - worker
    - function
    - serverless
    - api
    - route
spec:
  owner: dev@ethio.dev
  type: resource
  parameters:
    - title: Provide a name, route and gateway for your serverless function
      required:
        - component_id
        - owner
        - route
        - gateway
      properties:
        component_id:
          title: Function Name
          type: string
          description: A name for your serverless function.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: 
              - Group
        route:
          title: route
          type: string
          description: a route where you can attach this function to eg. subdomain.ethio.dev/route. 
        gateway:
          title: Gateway
          type: string
          description: The api gateway name aka the subdomain where you want to attach this route and function to.
          ui:options:
            allowedKinds:
              - Resource
    - title: Choose a location  
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./worker
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: '{{ parameters.component_id }}'
          description: '{{ parameters.description }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          owner: '{{ parameters.owner }}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'This is {{ parameters.component_id }}'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'